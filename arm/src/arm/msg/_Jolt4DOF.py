"""autogenerated by genpy from arm/Jolt4DOF.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import arm.msg

class Jolt4DOF(genpy.Message):
  _md5sum = "ad8b8a371273f3e223f527f8c430f8bd"
  _type = "arm/Jolt4DOF"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """arm/Joint shoulder
arm/Joint elbow
arm/Joint wrist_roll
arm/Joint wrist_pitch

================================================================================
MSG: arm/Joint
float64 position
float64 speed
float64 acceleration
"""
  __slots__ = ['shoulder','elbow','wrist_roll','wrist_pitch']
  _slot_types = ['arm/Joint','arm/Joint','arm/Joint','arm/Joint']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       shoulder,elbow,wrist_roll,wrist_pitch

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Jolt4DOF, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.shoulder is None:
        self.shoulder = arm.msg.Joint()
      if self.elbow is None:
        self.elbow = arm.msg.Joint()
      if self.wrist_roll is None:
        self.wrist_roll = arm.msg.Joint()
      if self.wrist_pitch is None:
        self.wrist_pitch = arm.msg.Joint()
    else:
      self.shoulder = arm.msg.Joint()
      self.elbow = arm.msg.Joint()
      self.wrist_roll = arm.msg.Joint()
      self.wrist_pitch = arm.msg.Joint()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_12d.pack(_x.shoulder.position, _x.shoulder.speed, _x.shoulder.acceleration, _x.elbow.position, _x.elbow.speed, _x.elbow.acceleration, _x.wrist_roll.position, _x.wrist_roll.speed, _x.wrist_roll.acceleration, _x.wrist_pitch.position, _x.wrist_pitch.speed, _x.wrist_pitch.acceleration))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.shoulder is None:
        self.shoulder = arm.msg.Joint()
      if self.elbow is None:
        self.elbow = arm.msg.Joint()
      if self.wrist_roll is None:
        self.wrist_roll = arm.msg.Joint()
      if self.wrist_pitch is None:
        self.wrist_pitch = arm.msg.Joint()
      end = 0
      _x = self
      start = end
      end += 96
      (_x.shoulder.position, _x.shoulder.speed, _x.shoulder.acceleration, _x.elbow.position, _x.elbow.speed, _x.elbow.acceleration, _x.wrist_roll.position, _x.wrist_roll.speed, _x.wrist_roll.acceleration, _x.wrist_pitch.position, _x.wrist_pitch.speed, _x.wrist_pitch.acceleration,) = _struct_12d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_12d.pack(_x.shoulder.position, _x.shoulder.speed, _x.shoulder.acceleration, _x.elbow.position, _x.elbow.speed, _x.elbow.acceleration, _x.wrist_roll.position, _x.wrist_roll.speed, _x.wrist_roll.acceleration, _x.wrist_pitch.position, _x.wrist_pitch.speed, _x.wrist_pitch.acceleration))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.shoulder is None:
        self.shoulder = arm.msg.Joint()
      if self.elbow is None:
        self.elbow = arm.msg.Joint()
      if self.wrist_roll is None:
        self.wrist_roll = arm.msg.Joint()
      if self.wrist_pitch is None:
        self.wrist_pitch = arm.msg.Joint()
      end = 0
      _x = self
      start = end
      end += 96
      (_x.shoulder.position, _x.shoulder.speed, _x.shoulder.acceleration, _x.elbow.position, _x.elbow.speed, _x.elbow.acceleration, _x.wrist_roll.position, _x.wrist_roll.speed, _x.wrist_roll.acceleration, _x.wrist_pitch.position, _x.wrist_pitch.speed, _x.wrist_pitch.acceleration,) = _struct_12d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_12d = struct.Struct("<12d")
